<?php
includeCSS(['modules/general', 'modules/fonts', 'modules/header', 'modules/breadcrumb', 'modules/content']);
include DOCUMENT_ROOT . '/view/v3/head.php';
$posts = getPosts();
?>
<body>
<?php include DOCUMENT_ROOT . '/view/v3/menu.php'; ?>
<main class="container">
    <ul class="breadcrumb">
        <li><a href="/ru">Главная</a></li>
        <li><a href="/ru/blog">Блог</a></li>
        <li class="active"><?php echo getSeoField('h1') ?></li>
    </ul>
    <article class="content">
        <h1><?php echo getSeoField('h1') ?></h1>
        <time datetime="<?php echo getSeoField('date.htmlFormat') ?>" class="date-pub"><?php echo getSeoField('date.viewFormat') ?></time>
        <p>Не так давно я общался с одной хорошей знакомой, которая учится на программиста. В процессе беседы я понял, что у нее такой же (неправильный на мой взгляд) образ жизни как у большинства других студентов. Такой же как был у меня и всех моих друзей. Дабы помочь ей взглянуть на реальность программирования и мотивировать уже сейчас что-то делать, крик моей души написал ей огромное сообщение, в котором я изложил все свои мысли. Потом я показал это сообщением многим друзьям программист, пусть и с какими-то комментариями и совсем мелкими разногласиями все из них согласились с написанным текстом, некоторые взяли на заметку себе для показа данного изложения своим друзьям - студентам, некоторые просто посоветовали выкинуть это в интернет. И вот я решил опубликовать то самое больше сообщение. Возможно кому-то оно станет полезным. Заранее извинятся за синтаксические и орфографические ошибки и описки, так как это слабо-проверенная на ошибки вырезка из беседы, которую позже я разбавил картинками. </p>

        <p>Итак погнали..</p>
        <div class="shadow">
            <img class="post-img" src="/images/blog/2019/students/st1.jpeg" alt="image" loading="lazy" width="700" height="316">
        </div>

        <p>Ты сейчас оканчиваешь первый курс (а поверь ничего не изменится и через год и через два).</p>
        <p>Но при этом в твоей голове практически нет никаких знаний. И даже когда ты окончишь универ ты сможешь первый год рассчитывать на зп в 250, максимум 300 уе. Тебя даже джуном тяжело назвать ибо ты знаешь крайне мало теории и у тебя нет практики.</p>
        <p>Теорию ты плохо будешь знать по 4м причинам:</p>
        <ol>
            <li>Это очень обширная область и изучить здесь все в рамках курса невозможно.</li>
            <li>Чаще всего изучается устаревший материал.</li>
            <li>На лекция ты скорее всего сидишь в соц сетях, общаешься с одногруппниками и просто ходишь чтобы отметиться что я пришел.. ты вникаешь только в 30-40 процентов происходящего, а даже если тема легкая и ты запомнил 80%, то ты это не подтверждаешь практикой после лекций сидя после пар в свободное время за компом. На практических занятиях например я часто играл в контру по сетке (при этом успел кое как сделать лабы минимальный набор для зачетов).</li>
            <li>Чтобы что-то изучать и поглощать в виде знаний надо идеальное настроение, идеальная заинтересованность и обстановка. В 8-10 утра вряд ли это будет у любого студента, и как итог материал плохо усваивается..сидеть на лекциях в универе и смотреть эту же лекцию вечером дома на диване на ютубе это разные вещи.</li>
        </ol>
        <div class="shadow"><img class="post-img" src="/images/blog/2019/students/st2.jpeg" alt="image" loading="lazy" width="700" height="364"></div>
        <p>И так как итог тебе после универа будет больше 20-22 года. Ты ничего не знаешь и не умеешь. В лучшем случае ты на последнем курсе найдешь какую-то подработку и хоть там будешь получать какой-то опыт.</p>
        <p>Все свободное время ты тратишь на прогулки, сериальчики и обустраивание личной жизни? Если ты уже идешь в IT-сферу, то этот режим работы точно не для тебя.</p>

        <p>Я уже не учусь в универе, прошел через колледж и универ по IT-специальностям и у меня совсем другое понимание и восприятие на все это. Первое что я тебе скажу &mdash; это то, что тебя там ничему не научат, и выше я привел 4 весомые причины. Второе &mdash; это если тебе и правда нравится эта сфера тебя надо приучить себя работать над собой и само-обучаться. Само-обучаться всегда и каждый день. Я редко могу найти день, когда я не смотрю и не изучаю что-то новое (иногда это я делаю на работе в фоновом потоке), но чаще всего в свободное время.</p>
        <div class="shadow"><img class="post-img" src="/images/blog/2019/students/st6.jpg" alt="image" loading="lazy"></div>

        <p>Я так же хожу гулять каждый день, и у меня тоже есть личная жизнь, спорт в виде пробежек и футбола и другие интересы, хобби и путешествия.</p>
        <div class="shadow"><img class="post-img" src="/images/blog/2019/students/st7.jpg" alt="image" loading="lazy"></div>

        <p>Просто нужно планировать своё время. Иногда делать вперед на недели, но планировать так, что что-то может поменяться. И самое главное приучай себя обучаться...всегда и почти каждый день.</p>
        <div class="shadow"><img class="post-img" src="/images/blog/2019/students/st5.jpg" alt="image" loading="lazy"></div>

        <p>Программисты как правило ленивые люди...лучше всего обучаться по книгам...но так как я тоже ленивый я слушаю подкасты и смотрю ютуб (и сейчас я уже достиг достаточно хорошего понимания программирования и мне тяжело найти на ютубе что-то годное и новое, но я все равно нахожу и смотрю + изредка но читаю книги). Поэтому приучи себя каждый день само-обучаться. Можешь выбрать себе подкасты по программированию, которые по духу и слушать новые выпуски &mdash; таким образом ты будешь в теме новейших событий и технологий в IT-мире в целом.</p>
        <div class="shadow"><img class="post-img" src="/images/blog/2019/students/st3.jpg" alt="image" loading="lazy"></div>

        <p>Не жди, что после защиты диплома что-то изменится...ты станешь умнее, и тебе сразу позвонят из какой-то компании и предложат работу хотя бы за 400 долларов. Просто представь, что ты вчера получила диплом и тебе надо двигаться дальше.</p>
        <div class="shadow"><img class="post-img" src="/images/blog/2019/students/st4.jpg" alt="image" loading="lazy"></div>

        <p>Теперь на 1м (или 2м не важно) курсе очень важно понять что ты хочешь делать в этой сфере...раз уж в IT ты выбрала именно программирование, а не сеошку например или дизайн, то тут есть несколько направлений:</p>
        <p>- системное (написание ОС, драйверов и тд) &mdash; это низкоуровневое программирование, как по мне немного скучное, но и сложное</p>
        <p>- разработка игр &mdash; тут без комментариев...неплохо бы знать физику</p>
        <p>- веб разработка &mdash; не так все сложно..довольно интересно..но могу сказать что надо знать невероятно много всего (впрочем в других областях наверно тоже)</p>
        <p>- мобильная &mdash; тоже не скажу что сложно (тут скорее есть подразделение на 2 области под ведро писать или под яблоко..хотя и другие мелкие области тоже есть). В веб кстати тоже есть 2 направления backend и frontend</p>
        <p>- прикладное - написание программ для ноутов, ПК &mdash; тоже обычное по сложности и интересности &mdash; с него и начинают в универах как правило.</p>
        <p>- научное &mdash; нечто специфичное, заточенное под узкий профиль и науку..будь то биология, химия, математика и др.</p>
        <div class="shadow"><img class="post-img" src="/images/blog/2019/students/st9.jpg" alt="image" loading="lazy"></div>
        <p>Наиболее востребованные как по мне это веб, мобильные и прикладные. В любой момент ты можешь сменить направление. Но если ты сеньер в прикладном программировании, это не значит что придя в мобилки ты и там будешь сеньером. Твой уровень на пару лет (в лучшем случае на год) скатится до мидла, так как это совсем другая кухня со своими рецептами.</p>
        <p>Так же у программистов есть своя классификация по уровня знаний</p>
        <p>- джун &mdash; вообще нихера не умеет..очень косячный..все задачи после него надо смотреть, возможно исправлять..без опыта работы или с крайне малым опытом.</p>
        <p>- мидл &mdash; вполне хороший программист, способный решать средние и порой тяжелые задачи (алгоритмы). Имеет опыт 1-2 года. Уже что-то знает и ему можно доверять.</p>
        <p>- сеньер &mdash; оочень крутой чел...знает все..или почти все...опыт работы минимум думаю 4-5 лет..иногда чтобы достичь этого уровня может и более лет потребоваться (зависит от личных качеств человека и возможно сферы).</p>
        <p>Опять же на счет опыта и всех этих разновидностей это все условно. Сеньер в нашей минской компании, возможно это только джун в гугл.</p>
        <p>Ещё можно выделить тимлида (назовем его бригадирам в команде:) ) он распределяет задачи между своей командой , проверяет все и так же выполняет какие-то тяжелые задачи. Вся ответственность задач его команды лежит на нем. Как правило ими являются сеньеры, но могут и очень хорошие мидлы.</p>
        <p>Ещё есть архитекторы программного обеспечения &mdash; это мега умные люди, тоже сеньеры..а может и даже выше (я сам пока что не достиг этого Дзэн состояния, поэтому точно сказать не могу :)). Все зависит от степени. Скажем чтобы в вебе спроектировать грамотно архитектуру мало быть back-end сеньером..надо и фронт хорошо знать &mdash; а это уже считай Full стек разработчик.</p>
        <div class="shadow"><img class="post-img" src="/images/blog/2019/students/st10.jpg" alt="image" loading="lazy"></div>
        <p>Не особо слушай людей, которые будут диктовать свои технологии и языки программирования, говоря что этот круче того...всё исключительно зависит от ситуаций и задач. И потом на рынке есть топ 5-10 языков, которые уже около 20-25 лет не меняются и не сдают позиций (иногда просто между собой уступают позиции если что-то новое вышло в плане фишек,обновлений или например фреймвоков для этих языков, но все эти языки развиваются до сих пор).. Я бы выделил следующие языки: C, C++, C# , Питон, Java, Javascript и PHP . Из более новых можно выделить Go, мб ещё Rust. Ну и языки мобильной разработки типа котлина или свифт &mdash; последние 2 действительно сравнительно новые (наверно примерно 4-5 лет всего как ими активно пользуются) &mdash; этому есть логичное объяснение, так как моб разработка это одна из самых новых по сравнению с тем же вебом или прикладным, то и какие-то четкие языки с направления тут сформировались позже чем где-либо.</p>

        <p>Вообще надо понимать что языки бывают как функциональными, так и объектно- ориентированными (есть и другие парадигмы) и надо понимать что они отличаются друг от друга внутри... плюс надо помнить как они работают..где-то компилятор, где-то интерпретатор (но это уже нюансы). Очень круто когда программист разбирается на уровне асинхронности, процессов и потоков, но к этому тоже приходят не сразу.</p>
        <p>Так же не слушай тех, кто говорит, что например PHP плохой язык &mdash; это мнение людей, которые показывают свою тупость и незнание программирования (эта шутка пошла из-за говнокодеров, низкого порога вхождения языка, что скорее ему в плюс чем в минус, ну и потому что раньше PHP был реально плох..но это было в 2000 максимум 2007-2010. Сейчас очень хороший и на нем работает больше 70% веб проектов в мире (backend). Так же можно сказать про JavaScript (даже есть шутка про проститутку и JS). Мне он тоже не нравится, но его я тоже использую часто. Так же слышал упреки в адрес Java и Питона ..хотя думаю про любой язык можно найти шутки. Так что это всё исключительно вкусовщина.</p>
        <div class="shadow"><img class="post-img" src="/images/blog/2019/students/st12.jpg" alt="image" loading="lazy"></div>

        <p>Итак после того как ты определилась с направлением я постараюсь на примере веб технологий объяснить почему так важно начать изучать программирование как можно раньше, и почему не стоит рассчитывать на учреждения образования. Чтобы быть крутым специалистом, тебе надо знать хорошо всего пару языков программирования. Помимо языков надо знать кучу технологий, протоколов и какой-то общей фигни, которая надо не только вебам, но и всем прогерам. Я даже опускаю то, что тебе надо знать алгоритмы и крайне желательно математические дисциплины (от вышки и тер. вер, до дискретной математики и математического моделирования). Хотя откровенно отвечая нужна ли математика современным программистам (если это не специфическая работа), то мой ответ &laquo;нет не нужна&raquo;. В 80% случаем работа сводится к тому, чтобы взять данные из базы и вывести во вьюшку (на экран если быть проще). И не важно мобильное , прикладное или веб. Ну или записать данные в базу. Тут скорее важно сделать это правильно согласно некоторой архитектуре. Я напишу список, пожалуй, который подойдет даже хорошему full стек разработчику для веба (и frontend разработчику или backend)...это просто огромнейший список. Но его надо знать. И так поехали:</p>
        <div class="shadow"><img class="post-img" src="/images/blog/2019/students/st11.jpg" alt="image" loading="lazy"></div>

        <p>Фронт:</p>
        <p>1) html 5 (+ надо смотреть что планируется в 6й версии)</p>
        <p>2) css ( в идеале надо смотреть черновики). Правильно использовать селекторы (помнить что css работает справа на лева и др...)</p>
        <p>- надо знать как минимум 1 css фреймворк и понимать как он работает (bootstrap вполне подойдет)</p>
        <p>- надо знать css препроцессоры (sass, less и др) &mdash; знать как они работают и уметь использовать</p>
        <p>- нужно знать базовые основы СЕО &mdash; без этого никуда (понимать как использовать теги HTML5 , что нельзя класть блочные элементы в инлайновые, где и в каком кол-ве использовать теги h1-h6 и др)</p>
        <p>3) Javacript (с 6ым ecmascript) &mdash; тут вообще можно один этот язык в чистом виде долго изучать..а ведь есть ещё куча моментов на что надо обратить внимание:</p>
        <p>- jQuery (очень крутая библиотека..но фреймворки лучше)</p>
        <p>- фреймворки (реакт, vue, ангуляр)</p>
        <p>- nmp &mdash; пакетный менеджер</p>
        <p>- сборщики (gulp, grunt, webpack) &mdash; причем они ещё нужные и для сеошки, чтобы на страницу отдавался именно код стилей и скрипты нужные только этой странице и ничего лишнего.</p>
        <p>4) освоить emmet</p>
        <p>5) не нравиться обычные скрипты освой кофе и тайп или что-то подобное. Тогда не забудь выучить babel или другой компилятор в js.</p>
        <p>6) АПИ поисковых систем и алгоритмы ранжирования (это скорее под сео). (+ AMP, Turbo , яндекс -дзен)</p>
        <p>7) верстка (валидная, кросбраузерная, современная, адаптивная)</p>
        <div class="shadow"><img class="post-img" src="/images/blog/2019/students/st13.jpg" alt="image" loading="lazy"></div>

        <p>Бэк (буду на примере PHP):</p>
        <p>1) чистый PHP</p>
        <p>2) движки (работал со многими но советую WordPress)</p>
        <p>3) фреймворки (Laravel, Симфони, Юи или любой другой). Первые 2 наиболее крутые.</p>
        <p>4) PSR &mdash; стандарты как правильно писать код, где переносить кавычки , где ставить пробелы (табы) , как называть переменные и многое многое другое.</p>
        <p>5) REST &mdash; этот как и пункт 4 способ правильного программирования и правильного названия методов.</p>
        <p>6) Безопасность. Я не знаю на сколько уделяется большое внимание безопасности например в мобилках..но в вебе это часто большая проблема. И это логично, потому что лучший дебаггер веб разработчика &mdash; это браузер. С его помощи можно получить много инфы о странице, а если поставить некоторые расширения, то и вообще проводить неплохие манипуляции. Поэтому в вебе надо знать как защититься хотя бы от sql инъекций, xss уязвимостей и межсайтовой подделки запросов csrf &mdash; хотя это не единственные угрозы (сюда же можно добавить дос и де-дос &mdash; но это с скорее уже к настройке сервера).</p>
        <p>7) ORM системы (доктрина подойдет) и PDO</p>
        <p>8) Консоль (я почти каждый день её использую)</p>
        <p>9) Настройки сервера (хотя бы базовая, знать как работают сервер и вообще что происходит на бэке при запросах)</p>
        <p>10) Докер (вообще неплохо бы взглянуть на интернет облачные хранилища и уже сконфигурированные &laquo;контейнеры&raquo; для проектов. Так же знать что такое например <span style="color: #333333;"><span style="font-family: apple-system, BlinkMacSystemFont, Arial, sans-serif;">Kubernetes, </span></span><span style="color: #333333;"><span style="font-family: apple-system, BlinkMacSystemFont, Arial, sans-serif;">OpenShift. И может проще сдаться облаку, чем разворачивать большой стек технологий у себя</span></span>)</p>
        <p>11) композер</p>
        <p>12) curl</p>
        <p>13) протоколы &mdash; данный пункт следовало поставить повыше к 4-6 пунктам. Но уже переписывать ничего не буду. Надо знать чем отличаются и как работать с http, https, ftp, ssh и некоторые другие.</p>
        <p>14) выучить IDE например шторм или хорошие текстовые редакторы (с установленными расширениями). - это касается и фронта.</p>
        <p>15) Linux &mdash; большинство серверов работает на этой ОС, поэтому крайне желательно это знать.</p>

        <p>Кроме этого тебе надо знать ООП. Есть функциональные языки, где можно целый стартап написать без единого класса. Но PHP (как и большинство современных языков объектов &mdash; ориентированный), поэтому надо знать ООП. Чем глубже понимание, тем лучше. (классы. интерфейсы, трейты..) Неплохо бы знать разные порадигмы программирование. Надо понимать что один и тот же код на одном и тем же языке через разные порадигмы можно писать по разному. И твой проект должен придерживаться какой-то одной порадигмы. Это же касается и имен переменных например, то есть или везде верблюжья нотация или змеиная.</p>
        <p>Надо знать паттерны &mdash; я признаюсь во время изучения этого в универе я считал это самой бесполезной темой. И надо признать это самая сложная тема (для меня). Любой паттерн можно трактовать по разному (только в вебе можно найти несколько реализаций определенного паттерна . Если брать прикладное или моб там может чуть другая реализация) Кароче это тема описанная вилами по воде. Но крайне важная.</p>
        <p>Солид &mdash; то как писать код. И солид это не единственные принципы. Кстати REST и PSR (которые я писал выше) тоже можно отнести к принципам правильного написания кода.</p>
        <p>Тестирование моча и чай на скриптах, юнит тесты на php. Но это в идеале. Я практически не пишу тесты...хотя они нужны. Надо понимать что, даже тестирование бывает разным: функциональные тесты, приемочные тесты, юнит-тестирование и др.</p>
        <p>Нужно освоить гид, меркуриал или любую другую систему контроля версий.</p>
        <p>Не забывай поработать с форматами данных: json, xml , yaml</p>
        <div class="shadow"><img class="post-img" src="/images/blog/2019/students/st14.jpg" alt="image" loading="lazy"></div>

        <p>Приучи себя следить за обновлениями языков и технологий с которыми ты работаешь. Языки как правильно не часто обновляются, но там есть порой фундаментальные изменения.</p>
        <div class="shadow"><img class="post-img" src="/images/blog/2019/students/st16.jpg" alt="image" loading="lazy"></div>

        <p>Когда я учился в учреждениях образования мне казалось что проблема больших данных и оптимизации кода меня не затронет или затронет крайне не скоро. На самом деле это не так. Я уже давно работаю с данными в несколько десятков тысяч записей. И если нормальное знание баз данных и нормальлизация таблиц мне помогает на бэке (крайне редко возникают проблемы именно там), но на фронде это чаще. Поисковые системы крайне требовательны к коду как с точки зрения как оптимизации, так и быстродействия (особенно быстродействия). И тут надо понимать как заставить это все грузиться асинхронно или отложено. У тебя может быть идеально проработанное семантическое ядро, но какой в этом толк, если нет оптимизации в скорости загрузки страниц &mdash; так что на это тоже надо обращать внимание.</p>

        <p>Пиши код правильно, чтобы с годами (месяцами) при удалении (отключении) модулей не остался код в проекте. Такое может например получится на фронте с css и js при неправильной организации кода. Я называю такой код мертвым. Он не надо..но поисковые системы его находят и ругаются на него.</p>

        <p>При этом базы данных я практически не затрагивал...это подразумевает что ты уже знаешь и умеешь работать с ними. Какие именно базы не принципиально.</p>

        <p>Надо знать архитектурные подходы...архитектуру приложений...опять же везде он совершенно разный..веб, мобилки и прикладное. Например рассмотрим пример огромного проекта в вебе: бэк состоит из 3 частей. Одна сделана на симфони, вторая на ларавеле, третья на чистом PHP. Фронт например стоит из 2ух частей, которые сделаны на реакте и vue . Если углубиться в любую из частей там своя архитектура свои паттерны..как большие, так и маленькие. Надо разбивать большие участки кода на прослойки (например обвертка моделей в репозитории и обращение не к моделям, а к репозиториям, использование обсерверов и тд) &mdash; это всё делает код элегантным, а приложение модульным и легко расширяемым. Но в тоже время надо помнить что чем тоньше прослойка , тем быстрее работает приложение (например не использовать между базой и языком ORM системы там, где хватит чисто PDO). Понимание всего этого придет с годами.</p>
        <div class="shadow"><img class="post-img" src="/images/blog/2019/students/st15.jpg" alt="image" loading="lazy"></div>

        <p>Ещё что очень важно надо использовать фрейморки (хотя бы в больших проектах). На фреймворках сложнее писать чем на чистом коде. Но фрейморки дают несколько хороших плюсов:</p>
        <p>- ускоряют разработку приложений в целом</p>
        <p>- диктуют некий стиль и философию, которой ты придерживаешься и меньше говнокодишь</p>
        <p>- есть много готовых модулей (например авторизации и тебе не важно как она под капотом сделана (базовая авторизация, токенная, jwt или что-то другое).</p>
        <p>- безопасность. Как я уже писал выше в вебе это проблема, которой надо уделять много времени и сил. И фреймворки зачастую уже это сделали за тебя.</p>
        <div class="shadow"><img class="post-img" src="/images/blog/2019/students/st18.jpg" alt="image" loading="lazy"></div>

        <p>Есть мнение что fullstack разработчик это вечный middle. Отчасти я согласен с этим, и я очень много свободного времени уделяю обучению и саморазвитию, чтобы эта фраза не касалась меня и чтобы можно было самому делать хорошие проекты под ключ и на фронте и на бэке &mdash; при этом не косячно, а с использованием чего-то нового и свежего.</p>

        <p>Возможно что-то забыл ибо все в голове не удержишь. Ну и да про английский тоже говорить не буду..чем лучше - тем лучше))</p>

        <p>Тебе необязательно учить сразу оба направления, можно одно.</p>
        <p>И помни, если твой прошлогодний код ты считаешь говногодом и ты могла бы его переписать лучше &mdash; значит ты в правильном направлении мыслишь и развиваешься.</p>

        <p>И так я описал веб...возможно что-то забыл..но поверь это точно в районе 90% что надо знать, чтобы быть хорошим специалистом. Другой вопрос что всё это можно изучать годами.</p>
        <p>Как видишь по факту я использую только 2 языка программирования, но кроме них, как я перечислил выше это куча других штук, которые реально надо.</p>

        <p>В других направлениях программирования я не думаю что что-то координатно изменится...там свои технологии и языки..но принцип и объем примерно такой же.</p>

        <p>Не все вещи которые я осваиваю (особенно если это что-то совершенно новое или сложное) я могу понимать с 1го раза..зачастую надо несколько раз перечитать и пересмотреть чтобы полностью понять как это работает. Так что и ты не пугайся если с первого раза что-то не понятно. Много так же зависит от источника, который подает этот материал (один авторы и рассказчики раскрывают его лучше, другие хуже).</p>

        <p>Теперь ты знаешь что тебя ждет впереди, и у тебя всего 2 варианта или забрать документ прям сейчас или начать изучать программирование уже сегодня.</p>
        <div class="shadow"><img class="post-img" src="/images/blog/2019/students/st17.jpg" alt="image" loading="lazy"></div>

        <p>Тут очень много терминологии, которую крайне тяжело понять даже студенту 2,3 курса, но это всё есть в интернете. Теперь ты знаешь с чего начать и что и изучать. Этот перечень можно считай мозаикой, каждый пункт которого просто один пазл, и освоив что-то из этого списка общая картинка веб- программирования в твоей голове станет чуть яснее и правильнее. Возможно этот непонятный список поможет и направит в нужном направлении, но он уже есть, ведь когда только я начинал изучать всё это, то для сбора этой самой мозаики самые мелкие пазлы мне приходилось искать самому на просторе интернета и книг методом проб и ошибок, путем отсеивания кучи ненужной и повторяющейся инфы.</p>
        <div class="shadow"><img class="post-img" src="/images/blog/2019/students/st19.jpg" alt="image" loading="lazy"></div>


        <p>И как итог подведем итоги профессии программиста</p>

        <b>Преимущества:</b>
        <ul>
            <li>Перспективная профессия. Хороший специалист не останется без работы.</li>
            <li>Высокая заработная плата. Но не сразу.</li>
            <li>Работая в IT ты так или иначе в теме последних IT событий.</li>
            <li>Часто более гибкий график, чем в других сферах. Возможность работать не только в удобное время, но и удаленно в других странах.</li>
        </ul>

        <b>Недостатки:</b>
        <ul>
            <li>Нужно очень много чего знать. Постоянно совершенствовать свои знания и использовать актуальные методологии и подходы.</li>
            <li>Крайне желательно знать английский язык.</li>
            <li>Плохое влияние на здоровье. Говорят от этого ухудшается зрение. Программирование — это малоподвижный образ жизни, который нужно разбавлять спортом или другими активными увлечениями.</li>
            <li>Большая ответственность (например при работе с банковскими и финансовыми данными).</li>
            <li>Иногда тяжело найти общий язык с заказчиками и менеджерами.</li>
        </ul>
        <div class="shadow"><img class="post-img" src="/images/blog/2019/students/st20.jpeg" alt="image" width="700" height="372"></div>

    </article>
</main>
<?php include DOCUMENT_ROOT . '/view/v3/footer.php'; ?>
<?php include DOCUMENT_ROOT . '/view/v3/js-scripts.php'; ?>
</body>
</html>